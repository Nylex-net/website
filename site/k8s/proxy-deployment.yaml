apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f ../docker-compose-deploy.yml
    kompose.service.type: LoadBalancer
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: proxy
  name: proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: proxy
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f ../docker-compose-deploy.yml
        kompose.service.type: LoadBalancer
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/site-default: "true"
        io.kompose.service: proxy
    spec:
      containers:
      - name: proxy
        image: nylexdotnet/website:proxy
        env:
        - name: DOMAIN
          valueFrom:
            secretKeyRef:
              name: nylex-secret
              key: DOMAIN
        ports:
        - containerPort: 80
          # hostPort: 80
          # protocol: TCP
        - containerPort: 443
          # hostPort: 443
          # protocol: TCP
        resources: {}
        volumeMounts:
          - mountPath: /vol/static
            name: static-data
          - mountPath: /vol/www
            name: certbot-web
          - mountPath: /vol/proxy
            name: proxy-dhparams
          - mountPath: /etc/letsencrypt
            name: certbot-certs
      restartPolicy: Always
      volumes:
        - name: static-data
          hostPath:
            path: /vol/static
          # persistentVolumeClaim:
          #   claimName: static-data
        - name: certbot-web
          hostPath:
            path: /vol/www
          # persistentVolumeClaim:
          #   claimName: certbot-web
        - name: proxy-dhparams
          hostPath:
            path: /vol/proxy
          # persistentVolumeClaim:
          #   claimName: proxy-dhparams
        - name: certbot-certs
          hostPath:
            path: /etc/letsencrypt
          # persistentVolumeClaim:
          #   claimName: certbot-certs
status: {}
